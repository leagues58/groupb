<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <meta charset="utf-8">
    <meta name="description" content="spelling bee with groups">
    <meta name="author" content="eric reeves">

    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="stylesheet" href="css/bulma.min.css">
    <link rel="stylesheet" href="css/style.css">
  </head>

  <body>

    <div class="container" style="margin-top: 20px;">
      <div class="columns">
        <div class="column">
          <h2 class="title is-1 title"><%= title %></h2>
        </div>
        <div class="column"></div>
          <button class="collapsible button is-primary">Rules</button>
          <div class="rules">
            <ol>
              <li>You must use the center letter</li>
              <li>Words must be > 3 letters long</li>
              <li>Words cannot be proper nouns or use hyphens</li>
            </ol>
          </div>
        </div>
        <div class="column"></div>
      </div>
    </div>

    <div class="container" style="margin-top: 20px;">
      <div class="columns">
        <div class="column"></div>
        <div class="column is-two-thirds">
          <input type="text" class="input" id="guess-input">
        </div>
        <div class="column"></div>
      </div>
    </div>

    <div class="container" style="margin-top: 20px;">
      <div class="columns">
        <div class="column">
          <div class="sb-hive">
            <div class="hive">
              <svg class="hive-cell center" viewBox="0 0 120 103.92304845413263">
                <polygon class="cell-fill center-color" points="0,51.96152422706631 30,0 90,0 120,51.96152422706631 90,103.92304845413263 30,103.92304845413263" stroke="white" stroke-width="7.5"></polygon>
                <text class="cell-letter" x="50%" y="50%" dy="10.75%" id="center-text">a</text>
              </svg>
              <svg class="hive-cell outer" viewBox="0 0 120 103.92304845413263">
                <polygon class="cell-fill" points="0,51.96152422706631 30,0 90,0 120,51.96152422706631 90,103.92304845413263 30,103.92304845413263" stroke="white" stroke-width="7.5"></polygon>
                <text class="cell-letter" x="50%" y="50%" dy="10.75%">b</text>
              </svg>
              <svg class="hive-cell outer" viewBox="0 0 120 103.92304845413263">
                <polygon class="cell-fill" points="0,51.96152422706631 30,0 90,0 120,51.96152422706631 90,103.92304845413263 30,103.92304845413263" stroke="white" stroke-width="7.5"></polygon>
                <text class="cell-letter" x="50%" y="50%" dy="10.75%">c</text>
              </svg>
              <svg class="hive-cell outer" viewBox="0 0 120 103.92304845413263">
                <polygon class="cell-fill" points="0,51.96152422706631 30,0 90,0 120,51.96152422706631 90,103.92304845413263 30,103.92304845413263" stroke="white" stroke-width="7.5"></polygon>
                <text class="cell-letter" x="50%" y="50%" dy="10.75%">d</text>
              </svg>
              <svg class="hive-cell outer" viewBox="0 0 120 103.92304845413263">
                <polygon class="cell-fill" points="0,51.96152422706631 30,0 90,0 120,51.96152422706631 90,103.92304845413263 30,103.92304845413263" stroke="white" stroke-width="7.5"></polygon>
                <text class="cell-letter" x="50%" y="50%" dy="10.75%">e</text>
              </svg>
              <svg class="hive-cell outer" viewBox="0 0 120 103.92304845413263">
                <polygon class="cell-fill" points="0,51.96152422706631 30,0 90,0 120,51.96152422706631 90,103.92304845413263 30,103.92304845413263" stroke="white" stroke-width="7.5"></polygon>
                <text class="cell-letter" x="50%" y="50%" dy="10.75%">f</text>
              </svg>
              <svg class="hive-cell outer" viewBox="0 0 120 103.92304845413263">
                <polygon class="cell-fill" points="0,51.96152422706631 30,0 90,0 120,51.96152422706631 90,103.92304845413263 30,103.92304845413263" stroke="white" stroke-width="7.5"></polygon>
                <text class="cell-letter" x="50%" y="50%" dy="10.75%">g</text>
              </svg>
            </div>
          </div>
        </div>
        <div class="column">
          <table id="word-table" class="table">
            <thead>
              <tr><th>Word List (<span id="found-words-count"><%=foundWords.length%></span>/<%=puzzle.today.answers.length%>)</th></tr>
            </thead>
            <tbody>
              <%if (foundWords) {%>
                <%for (let i=0; i<foundWords.length; i++) {%>
                  <tr><td><%=foundWords[i]%></td></tr>
                <%}%>
              <%}%>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <script src='/socket.io/socket.io.js'></script>
    <script>
      const socket = io();
      const availableOuterLetters = <%-JSON.stringify(puzzle.today.outerLetters)%>;
      const availableCenterLetter = <%-JSON.stringify(puzzle.today.centerLetter)%>;

      scrambleLetters(availableOuterLetters, availableCenterLetter); 

      let userName = getCookie('user-name');

      if (userName == null || userName == '') {
         userName = prompt('Enter your username');
        document.cookie = `user-name=${userName}`;
      }

      socket.on('answerFound', function (data) {
        let table = document.getElementById("word-table");
        deleteRows(table);
        let foundWords = data.foundWords;
        for (let word of foundWords) {
          let row = table.insertRow();
          let cell = row.insertCell();
          cell.innerHTML = word;
        }

        document.getElementById('found-words-count').innerHTML = data.foundWords.length; 
      });
      socket.on('alreadyFound', function (data) {
        let table = document.getElementById("word-table");
        for (let i = 0;  i < table.rows.length; i++) {
          if (table.rows[i].cells[0].innerHTML == data) {
            flashRed(table.rows[i].cells[0]);
          }
        }
      });

      window.addEventListener('keydown', function(event) {
          if (event.key == 'Enter') {
            sendGuess();
          } else if (event.key == ' ') {
            scrambleLetters(availableOuterLetters, availableCenterLetter);
          }
      });

      function sendGuess() {
        const guess = document.getElementById('guess-input').value;
        document.getElementById('guess-input').value = '';
        if (guess != '') {
          console.log('sending ' + guess);
          socket.emit('guess', {guess: guess, userName: userName});
        }
      }

      function deleteRows(table) {
        let rowCount = table.rows.length
        while (table.rows.length > 1) {
          table.deleteRow(1);
        }
      }

      function flashRed(cell) {
        cell.classList.add('is-danger');
        setTimeout(function(){ cell.classList.remove('is-danger'); }, 700);
      }

      function scrambleLetters(availableOuterLetters, availableCenterLetter) {
        const outerLetterElements = document.getElementsByClassName('outer');
        const centerLetterElement = document.getElementsByClassName('center');
        let tempOuterLetters = JSON.parse(JSON.stringify(availableOuterLetters));

        centerLetterElement[0].lastElementChild.firstChild.nodeValue = availableCenterLetter;

        for (let element of outerLetterElements) {
          let letter = tempOuterLetters[Math.floor(Math.random()*tempOuterLetters.length)];
          element.lastElementChild.firstChild.nodeValue = letter;
          removeValueFromArray(tempOuterLetters, letter);
        }
      }

      function removeValueFromArray(array, value) {
        for(var i = array.length - 1; i >= 0; i--) {
          if(array[i] === value) {
            array.splice(i, 1);
          }
        }
      }

      function getCookie(name) {
        let nameEQ = name + '=';
        let ca = document.cookie.split(';');
        for(let i=0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0)==' ') c = c.substring(1,c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
        }
        return null;
    }


      let coll = document.getElementsByClassName("collapsible");
      for (let i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function() {
          this.classList.toggle("active");
          var content = this.nextElementSibling;
          if (content.style.maxHeight){
            content.style.maxHeight = null;
          } else {
            content.style.maxHeight = content.scrollHeight + "px";
          } 
        });
      }

    </script>

  </body>
</html>
