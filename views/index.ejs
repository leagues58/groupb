<!DOCTYPE html>
<html>
  <head>
    <title>group bee</title>
    <meta charset="utf-8">
    <meta name="description" content="spelling bee with groups">
    <meta name="author" content="eric reeves">

    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="stylesheet" href="css/bulma.min.css">
    <link rel="stylesheet" href="css/style.css">
  </head>

  <body>

    <div class="container header">
      <div class="columns">
        <div class="column">
          <h2 class="title is-1 has-text-centered" style="padding-bottom:30px">group bee</h2>
        </div>
      </div>
    </div>

    <div class="container" style="margin-top: 70px;">
      <div class="columns">

        <div class="column has-text-centered">
          <input type="text" class="input" id="guess-input">
          <div class="sb-hive">
            <div class="hive">
              <svg class="hive-cell center" viewBox="0 0 120 103.92304845413263">
                <polygon class="cell-fill center-color" points="0,51.96152422706631 30,0 90,0 120,51.96152422706631 90,103.92304845413263 30,103.92304845413263" stroke="white" stroke-width="7.5"></polygon>
                <text class="cell-letter" x="50%" y="50%" dy="10.75%" id="center-text">a</text>
              </svg>
              <svg class="hive-cell outer" viewBox="0 0 120 103.92304845413263">
                <polygon class="cell-fill" points="0,51.96152422706631 30,0 90,0 120,51.96152422706631 90,103.92304845413263 30,103.92304845413263" stroke="white" stroke-width="7.5"></polygon>
                <text class="cell-letter" x="50%" y="50%" dy="10.75%">b</text>
              </svg>
              <svg class="hive-cell outer" viewBox="0 0 120 103.92304845413263">
                <polygon class="cell-fill" points="0,51.96152422706631 30,0 90,0 120,51.96152422706631 90,103.92304845413263 30,103.92304845413263" stroke="white" stroke-width="7.5"></polygon>
                <text class="cell-letter" x="50%" y="50%" dy="10.75%">c</text>
              </svg>
              <svg class="hive-cell outer" viewBox="0 0 120 103.92304845413263">
                <polygon class="cell-fill" points="0,51.96152422706631 30,0 90,0 120,51.96152422706631 90,103.92304845413263 30,103.92304845413263" stroke="white" stroke-width="7.5"></polygon>
                <text class="cell-letter" x="50%" y="50%" dy="10.75%">d</text>
              </svg>
              <svg class="hive-cell outer" viewBox="0 0 120 103.92304845413263">
                <polygon class="cell-fill" points="0,51.96152422706631 30,0 90,0 120,51.96152422706631 90,103.92304845413263 30,103.92304845413263" stroke="white" stroke-width="7.5"></polygon>
                <text class="cell-letter" x="50%" y="50%" dy="10.75%">e</text>
              </svg>
              <svg class="hive-cell outer" viewBox="0 0 120 103.92304845413263">
                <polygon class="cell-fill" points="0,51.96152422706631 30,0 90,0 120,51.96152422706631 90,103.92304845413263 30,103.92304845413263" stroke="white" stroke-width="7.5"></polygon>
                <text class="cell-letter" x="50%" y="50%" dy="10.75%">f</text>
              </svg>
              <svg class="hive-cell outer" viewBox="0 0 120 103.92304845413263">
                <polygon class="cell-fill" points="0,51.96152422706631 30,0 90,0 120,51.96152422706631 90,103.92304845413263 30,103.92304845413263" stroke="white" stroke-width="7.5"></polygon>
                <text class="cell-letter" x="50%" y="50%" dy="10.75%">g</text>
              </svg>
            </div>
          </div>
        </div>

        <div class="column is-size-4 word-list" style="margin-top: 0px;">
          <span class="has-text-weight-bold">Word List (<span id="found-words-count">0</span>/<%=puzzle.answers.length%>)</span>
          <ul id="word-list" style="margin-top: 10px;">
            
          </ul>
        </div>
  
      </div>
    </div>

    <div class="container" style="margin-top: 70px;">
      <div class="columns">
        <div class="column has-text-right"> <a href="#" id="share-link">Get Share Link</a></div>
      </div>
    </div>


    <script src='/socket.io/socket.io.js'></script>
    <script>

      document.getElementById("share-link").addEventListener("click", (event) => {
        event.preventDefault();
        
      });
      const socket = io();
      const availableOuterLetters = <%- JSON.stringify(puzzle.outerLetters)%>;
      const availableCenterLetter = <%- JSON.stringify(puzzle.centerLetter)%>;
      let puzzle = <%- JSON.stringify(puzzle)%>;

      scrambleLetters(availableOuterLetters, availableCenterLetter); 
      savePuzzleToLocalStorage(puzzle);
      updatePage();

      let userName = getCookie('user-name');

      if (userName == null || userName == '') {
         userName = prompt('Enter your username');
        document.cookie = `user-name=${userName}`;
      }

      socket.on('wordFound', function (data) {

        /*let foundWords = data.foundWords;
        let list = document.getElementById("word-list");
        let foundNode;
        
        list.innerHTML = '';

        for (let word of foundWords) {
          let node = document.createElement('li');
          let textnode = document.createTextNode(word);
          node.appendChild(textnode);
          list.appendChild(node);

          if (word == data.guess) {
            foundNode = node;
          }
        }

        flashGreen(foundNode);
        document.getElementById('found-words-count').innerHTML = data.foundWords.length; */
      });

      socket.on('alreadyFound', function (data) {
        /*let list = document.getElementById("word-list");
        for (let i = 0;  i < list.children.length; i++) {
          if (list.children[i].innerHTML == data) {
            flashRed(list.children[i]);
          }
        }*/
      });

      socket.on('panagramFound', function (data) {
        alert(data);
      });
      

      window.addEventListener('keydown', function(event) {
        if (event.key == 'Enter') {

          const inputField = document.getElementById('guess-input');
          const guess = inputField.value;

          inputField.value = '';

          const validationResults = guessIsValid(guess);

          if (validationResults.valid) {
            saveWord(guess);
            updateWordList();
            flashGreen(guess);
            broadcastGuess(guess);
          } else {
            if (validationResults.message == 'Word aready found.') {
              flashRed(guess);
            }
            else if (validationResults.message != '') {
              alert(validationResults.message);
            }
          }

        } else if (event.key == ' ') {
          event.preventDefault();
          scrambleLetters(availableOuterLetters, availableCenterLetter);
        }
      });

      function saveWord(word) {
        const answers = JSON.parse(localStorage.getItem("answers"));

        for (let item of answers) {
          if (item.word == word) {
            item.foundBy = 484;
            break;
          }
        }

        localStorage.setItem("answers", JSON.stringify(answers))
      }

      function getFoundWords() {
        let foundWords = [];
        const answers = JSON.parse(localStorage.getItem("answers"));

        for (let item of answers) {
          if (item.foundBy != '') {
            foundWords.push(item.word);
          }
        }

        return foundWords;
      }

      function updateWordList() {
        // get list of all words that have been found and sort
        let foundWords = getFoundWords();
        foundWords.sort();

        if (foundWords.length != 0) {
          // display list as li's
          let list = document.getElementById("word-list");
          
          list.innerHTML = '';
  
          for (let item of foundWords) {
            let node = document.createElement('li');
            let textnode = document.createTextNode(item);
            node.appendChild(textnode);
            list.appendChild(node);
          }
        }

        document.getElementById('found-words-count').innerHTML = foundWords.length; 
      }

      function broadcastGuess(guess) {
        socket.emit('guess', {guess: guess, userName: userName});
      }

      function deleteRows(table) {
        let rowCount = table.rows.length
        while (table.rows.length > 1) {
          table.deleteRow(1);
        }
      }

      function flashRed(word) {
        let list = document.getElementById("word-list");
        let cell;
        for (let i = 0;  i < list.children.length; i++) {
          if (list.children[i].innerHTML == word) {
            cell = list.children[i];
            break;
          }
        }

        if (cell != undefined) {
          cell.classList.add('has-background-danger');
          setTimeout(function(){ cell.classList.remove('has-background-danger'); }, 700);
        }
      }

      function flashGreen(word) {
        let list = document.getElementById("word-list");
        let cell;
        for (let i = 0;  i < list.children.length; i++) {
          if (list.children[i].innerHTML == word) {
            cell = list.children[i];
            break;
          }
        }

        if (cell != undefined) {
          cell.classList.add('has-background-primary');
          setTimeout(function(){ cell.classList.remove('has-background-primary'); }, 700);
        }
      }

      function scrambleLetters(availableOuterLetters, availableCenterLetter) {
        const outerLetterElements = document.getElementsByClassName('outer');
        const centerLetterElement = document.getElementsByClassName('center');
        let tempOuterLetters = JSON.parse(JSON.stringify(availableOuterLetters));

        centerLetterElement[0].lastElementChild.firstChild.nodeValue = availableCenterLetter;

        for (let element of outerLetterElements) {
          let letter = tempOuterLetters[Math.floor(Math.random()*tempOuterLetters.length)];
          element.lastElementChild.firstChild.nodeValue = letter;
          removeValueFromArray(tempOuterLetters, letter);
        }
      }

      function removeValueFromArray(array, value) {
        for(var i = array.length - 1; i >= 0; i--) {
          if(array[i] === value) {
            array.splice(i, 1);
          }
        }
      }

      function getCookie(name) {
        let nameEQ = name + '=';
        let ca = document.cookie.split(';');
        for(let i=0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0)==' ') c = c.substring(1,c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
        }
        return null;
      }

      function guessIsValid(guess) {
        if (guess.trim() == '') {
          return {isValid: false, message:''};
        }

        const objRegExp  = /^[a-z]+$/;
        if (!objRegExp.test(guess)) {
          return {isValid: false, message:''};
        }

        if (!containsCenterLetter(guess)) {
          return {isValid: false, message:`Doesn't contain center letter.`};
        }

        if (containNonAvailableLetter(guess)) {
          return {isValid: false, message:`Contains letter not in grid.`};
        }

        if (!isInWordList(guess)) {
          return {isValid: false, message:`Word not in list.`};
        }

        if (wordFound(guess)) {
          return {isValid: false, message:`Word aready found.`};
        }

        return {valid: true, message:''};
      }

      function containsCenterLetter(guess) {
        if (guess.indexOf(availableCenterLetter) != -1) {
          return true;
        }
        return false;
      }

      function containNonAvailableLetter(guess) {
        for (let letter of guess) {
          if (availableOuterLetters.indexOf(letter) == -1 && letter != availableCenterLetter) {
            return true;
          }
        }
        return false;
      }

      function isInWordList(guess) {
        const answers = JSON.parse(localStorage.getItem("answers"));

        for (let item of answers) {
          if (item.word == guess) {
            return true;
          }
        }
        return false;
      }

      function wordFound(guess) {
        const answers = JSON.parse(localStorage.getItem("answers"));

        for (let item of answers) {
          if (item.word == guess) {
            if (item.foundBy != '') {
              return true;
            }
          }
        }
        return false;
      }

      function savePuzzleToLocalStorage(puzzle) {
        if (!localStorage.getItem("gameId")) {
          localStorage.setItem("gameId", puzzle.gameId);
          localStorage.setItem("puzzleId", puzzle.puzzleId);
          localStorage.setItem("dateCreated", puzzle.dateCreated);
          localStorage.setItem("centerLetter", puzzle.centerLetter);
          localStorage.setItem("outerLetters", JSON.stringify(puzzle.outerLetters));
          localStorage.setItem("pangrams", JSON.stringify(puzzle.pangrams));
          localStorage.setItem("answers", JSON.stringify(puzzle.answers));
        } else {
          console.log('puzzle already saved');
        }
      }

      function updatePage() {
        //let foundWords = getFoundWords().sort();
        updateWordList()


      }

    </script>

  </body>
</html>
